{"tagline":"Scripts and an API to easily start, update, maintain, administrate and enjoy a minecraft server.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# MCNode\r\n\r\nA Python API for running and extending a Minecraft server.\r\n\r\n# Examples\r\n\r\n## Make and Extend a Server\r\nThis downloads the Minecraft server jar, and starts up a server with the specified options.\r\nGreetBot will also greet people by name when they log in.\r\n\r\n```python\r\n# minecraft_server.py\r\n\r\nfrom mcnode import MCNode\r\nfrom greet_bot import GreetBot\r\n\r\nnode = MCNode({ \r\n    \t'server_jar_url' : 'https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft_server.jar',\r\n\t\t'server_directory' : './server/',\r\n\t\t'server_jar_path' : 'minecraft_server.jar',\r\n\t\t'init_memory' : '512M',\r\n\t\t'max_memory' : '1024M'\r\n})\r\n\r\nnode.add_bot(GreetBot(node))\r\nnode.read()\r\n```\r\n\r\n```python\r\n# greet_bot.py\r\n\r\nfrom mcbot import MCBot\r\n\r\nclass GreetBot(MCBot):\r\n\tdef on_connect(self, data):\r\n\t\tself.node.say('Welcome, %s' % (data[3]))\r\n```\r\n\r\nThen, in a command line, run `python2 minecraft_server.py`\r\n> Note: the `python2` command may differ by system. Check `python`, `python2.7`, etc. It just needs to be Python 2 (probably 2.7)\r\n\r\n# Installation\r\n\r\n### Fetch from Github\r\n> `git clone git://github.com/laneaasen/mcnode.git`\r\n\r\n### Install pexpect (bundled with MCNode)\r\n> ```bash\r\ncd mcnode/include/pexpect/\r\nsudo python2 setup.py install\r\n```\r\n>> Note: the `python2` command may differ by system. Check `python`, `python2.7`, etc. It just needs to be Python 2 (probably 2.7)\r\n\r\n### Run the Example Server\r\n> ```bash\r\npython2 main.py\r\n```\r\n\r\n### Log into the Server on Minecraft\r\n> It will be running on `localhost`. To configure the Minecraft server itself, open up the server directory (`server/` by default) and edit `server.properties`. \r\n\r\n# The Full API\r\n\r\n## Communicating with the Server\r\n\r\n#### `node.tell(message)`\r\n> Passes an arbitrary string into the server.\r\n> Functions like `node.say()`, `node.ban()` and `node.tp()` all extend `node.tell()`.\r\n\r\n#### `node.say(message)`\r\n> Wrapper for Minecraft's say function.\r\n> ```python\r\ndef say(self, message):\r\n\treturn self.tell('say ' + message)\r\n```\r\n\r\n## Killing the Server\r\n\r\n#### `node.stop()` \r\n> Politely asks the server to stop.\r\n> ```python\r\ndef stop(self):\r\n    return self.tell('stop')\r\n```\r\n\r\n#### `node.terminate()`\r\n> Uses `SIGTERM` (or Windows equivalent) to shut down the server. Usually won't cause data loss, but `node.stop()` is still advised.\r\n\r\n#### `node.kill()`\r\n> Uses `SIGKILL` (or Windows equivalent) to kill the server. This is not advised as it may cause data loss.\r\n","google":"","name":"Mcnode"}